<?php
/**
 * PaymentMethodApi
 * PHP version 7.1+
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.22.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\RequestOptions;
use Killbill\Client\Swagger\ApiException;
use Killbill\Client\Swagger\Configuration;
use Killbill\Client\Swagger\HeaderSelector;
use Killbill\Client\Swagger\ObjectSerializer;

/**
 * PaymentMethodApi Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentMethodApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPaymentMethodCustomFields
     *
     * Add custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentMethodId paymentMethodId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function createPaymentMethodCustomFields($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createPaymentMethodCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createPaymentMethodCustomFieldsWithHttpInfo
     *
     * Add custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentMethodCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createPaymentMethodCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentMethodCustomFieldsAsync
     *
     * Add custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentMethodCustomFieldsAsync($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createPaymentMethodCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentMethodCustomFieldsAsyncWithHttpInfo
     *
     * Add custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentMethodCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createPaymentMethodCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentMethodCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentMethodCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createPaymentMethodCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createPaymentMethodCustomFields'
            );
        }
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling createPaymentMethodCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/{paymentMethodId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaymentMethod
     *
     * Delete a payment method
     *
     * @param string $paymentMethodId paymentMethodId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param bool|null $deleteDefaultPmWithAutoPayOff deleteDefaultPmWithAutoPayOff (optional, default to false)
     * @param bool|null $forceDefaultPmDeletion forceDefaultPmDeletion (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePaymentMethod($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff = 'false', $forceDefaultPmDeletion = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deletePaymentMethodWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff, $forceDefaultPmDeletion, $pluginProperty, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deletePaymentMethodWithHttpInfo
     *
     * Delete a payment method
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $deleteDefaultPmWithAutoPayOff (optional, default to false)
     * @param bool $forceDefaultPmDeletion (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentMethodWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff = 'false', $forceDefaultPmDeletion = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentMethodRequest($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff, $forceDefaultPmDeletion, $pluginProperty, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaymentMethodAsync
     *
     * Delete a payment method
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $deleteDefaultPmWithAutoPayOff (optional, default to false)
     * @param bool $forceDefaultPmDeletion (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentMethodAsync($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff = 'false', $forceDefaultPmDeletion = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deletePaymentMethodAsyncWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff, $forceDefaultPmDeletion, $pluginProperty, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentMethodAsyncWithHttpInfo
     *
     * Delete a payment method
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $deleteDefaultPmWithAutoPayOff (optional, default to false)
     * @param bool $forceDefaultPmDeletion (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentMethodAsyncWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff = 'false', $forceDefaultPmDeletion = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentMethodRequest($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff, $forceDefaultPmDeletion, $pluginProperty, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaymentMethod'
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param bool $deleteDefaultPmWithAutoPayOff (optional, default to false)
     * @param bool $forceDefaultPmDeletion (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePaymentMethodRequest($paymentMethodId, $xKillbillCreatedBy, $deleteDefaultPmWithAutoPayOff = 'false', $forceDefaultPmDeletion = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling deletePaymentMethod'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deletePaymentMethod'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deleteDefaultPmWithAutoPayOff !== null) {
            $queryParams['deleteDefaultPmWithAutoPayOff'] = ObjectSerializer::toQueryValue($deleteDefaultPmWithAutoPayOff);
        }
        // query params
        if ($forceDefaultPmDeletion !== null) {
            $queryParams['forceDefaultPmDeletion'] = ObjectSerializer::toQueryValue($forceDefaultPmDeletion);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaymentMethodCustomFields
     *
     * Remove custom fields from payment method
     *
     * @param string $paymentMethodId paymentMethodId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $customField customField (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePaymentMethodCustomFields($paymentMethodId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deletePaymentMethodCustomFieldsWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deletePaymentMethodCustomFieldsWithHttpInfo
     *
     * Remove custom fields from payment method
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentMethodCustomFieldsWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentMethodCustomFieldsRequest($paymentMethodId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaymentMethodCustomFieldsAsync
     *
     * Remove custom fields from payment method
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentMethodCustomFieldsAsync($paymentMethodId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deletePaymentMethodCustomFieldsAsyncWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentMethodCustomFieldsAsyncWithHttpInfo
     *
     * Remove custom fields from payment method
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentMethodCustomFieldsAsyncWithHttpInfo($paymentMethodId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentMethodCustomFieldsRequest($paymentMethodId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaymentMethodCustomFields'
     *
     * @param string $paymentMethodId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePaymentMethodCustomFieldsRequest($paymentMethodId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling deletePaymentMethodCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deletePaymentMethodCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/{paymentMethodId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($customField)) {
            $customField = ObjectSerializer::serializeCollection($customField, /*'multi'*/'csv', true);
        }
        if ($customField !== null) {
            $queryParams['customField'] = ObjectSerializer::toQueryValue($customField);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethod
     *
     * Retrieve a payment method by id
     *
     * @param string $paymentMethodId paymentMethodId (required)
     * @param bool|null $includedDeleted includedDeleted (optional, default to false)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\PaymentMethod
     */
    public function getPaymentMethod($paymentMethodId, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentMethodWithHttpInfo($paymentMethodId, $includedDeleted, $withPluginInfo, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentMethodWithHttpInfo
     *
     * Retrieve a payment method by id
     *
     * @param string $paymentMethodId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\PaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodWithHttpInfo($paymentMethodId, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod';
        $request = $this->getPaymentMethodRequest($paymentMethodId, $includedDeleted, $withPluginInfo, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodAsync
     *
     * Retrieve a payment method by id
     *
     * @param string $paymentMethodId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAsync($paymentMethodId, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentMethodAsyncWithHttpInfo($paymentMethodId, $includedDeleted, $withPluginInfo, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodAsyncWithHttpInfo
     *
     * Retrieve a payment method by id
     *
     * @param string $paymentMethodId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAsyncWithHttpInfo($paymentMethodId, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod';
        $request = $this->getPaymentMethodRequest($paymentMethodId, $includedDeleted, $withPluginInfo, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethod'
     *
     * @param string $paymentMethodId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentMethodRequest($paymentMethodId, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling getPaymentMethod'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethodAuditLogsWithHistory
     *
     * Retrieve payment method audit logs with history by id
     *
     * @param string $paymentMethodId paymentMethodId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getPaymentMethodAuditLogsWithHistory($paymentMethodId)
    {
        list($response) = $this->getPaymentMethodAuditLogsWithHistoryWithHttpInfo($paymentMethodId);
        return $response;
    }

    /**
     * Operation getPaymentMethodAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve payment method audit logs with history by id
     *
     * @param string $paymentMethodId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodAuditLogsWithHistoryWithHttpInfo($paymentMethodId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getPaymentMethodAuditLogsWithHistoryRequest($paymentMethodId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodAuditLogsWithHistoryAsync
     *
     * Retrieve payment method audit logs with history by id
     *
     * @param string $paymentMethodId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAuditLogsWithHistoryAsync($paymentMethodId)
    {
        return $this->getPaymentMethodAuditLogsWithHistoryAsyncWithHttpInfo($paymentMethodId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve payment method audit logs with history by id
     *
     * @param string $paymentMethodId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodAuditLogsWithHistoryAsyncWithHttpInfo($paymentMethodId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getPaymentMethodAuditLogsWithHistoryRequest($paymentMethodId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethodAuditLogsWithHistory'
     *
     * @param string $paymentMethodId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentMethodAuditLogsWithHistoryRequest($paymentMethodId)
    {
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling getPaymentMethodAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/{paymentMethodId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethodByKey
     *
     * Retrieve a payment method by external key
     *
     * @param string $externalKey externalKey (required)
     * @param bool|null $includedDeleted includedDeleted (optional, default to false)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\PaymentMethod
     */
    public function getPaymentMethodByKey($externalKey, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentMethodByKeyWithHttpInfo($externalKey, $includedDeleted, $withPluginInfo, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentMethodByKeyWithHttpInfo
     *
     * Retrieve a payment method by external key
     *
     * @param string $externalKey (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\PaymentMethod, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodByKeyWithHttpInfo($externalKey, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod';
        $request = $this->getPaymentMethodByKeyRequest($externalKey, $includedDeleted, $withPluginInfo, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\PaymentMethod',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodByKeyAsync
     *
     * Retrieve a payment method by external key
     *
     * @param string $externalKey (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodByKeyAsync($externalKey, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentMethodByKeyAsyncWithHttpInfo($externalKey, $includedDeleted, $withPluginInfo, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodByKeyAsyncWithHttpInfo
     *
     * Retrieve a payment method by external key
     *
     * @param string $externalKey (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodByKeyAsyncWithHttpInfo($externalKey, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod';
        $request = $this->getPaymentMethodByKeyRequest($externalKey, $includedDeleted, $withPluginInfo, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethodByKey'
     *
     * @param string $externalKey (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentMethodByKeyRequest($externalKey, $includedDeleted = 'false', $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'externalKey' is set
        if ($externalKey === null || (is_array($externalKey) && count($externalKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalKey when calling getPaymentMethodByKey'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($externalKey !== null) {
            $queryParams['externalKey'] = ObjectSerializer::toQueryValue($externalKey);
        }
        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethodCustomFields
     *
     * Retrieve payment method custom fields
     *
     * @param string $paymentMethodId paymentMethodId (required)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function getPaymentMethodCustomFields($paymentMethodId, $audit = 'NONE')
    {
        list($response) = $this->getPaymentMethodCustomFieldsWithHttpInfo($paymentMethodId, $audit);
        return $response;
    }

    /**
     * Operation getPaymentMethodCustomFieldsWithHttpInfo
     *
     * Retrieve payment method custom fields
     *
     * @param string $paymentMethodId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodCustomFieldsWithHttpInfo($paymentMethodId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getPaymentMethodCustomFieldsRequest($paymentMethodId, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodCustomFieldsAsync
     *
     * Retrieve payment method custom fields
     *
     * @param string $paymentMethodId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodCustomFieldsAsync($paymentMethodId, $audit = 'NONE')
    {
        return $this->getPaymentMethodCustomFieldsAsyncWithHttpInfo($paymentMethodId, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodCustomFieldsAsyncWithHttpInfo
     *
     * Retrieve payment method custom fields
     *
     * @param string $paymentMethodId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodCustomFieldsAsyncWithHttpInfo($paymentMethodId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getPaymentMethodCustomFieldsRequest($paymentMethodId, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethodCustomFields'
     *
     * @param string $paymentMethodId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentMethodCustomFieldsRequest($paymentMethodId, $audit = 'NONE')
    {
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling getPaymentMethodCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/{paymentMethodId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentMethods
     *
     * List payment methods
     *
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param string|null $pluginName pluginName (optional)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\PaymentMethod[]
     */
    public function getPaymentMethods($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentMethodsWithHttpInfo($offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentMethodsWithHttpInfo
     *
     * List payment methods
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\PaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentMethodsWithHttpInfo($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod[]';
        $request = $this->getPaymentMethodsRequest($offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentMethodsAsync
     *
     * List payment methods
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodsAsync($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentMethodsAsyncWithHttpInfo($offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentMethodsAsyncWithHttpInfo
     *
     * List payment methods
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentMethodsAsyncWithHttpInfo($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod[]';
        $request = $this->getPaymentMethodsRequest($offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentMethods'
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentMethodsRequest($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {

        $resourcePath = '/1.0/kb/paymentMethods/pagination';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($pluginName !== null) {
            $queryParams['pluginName'] = ObjectSerializer::toQueryValue($pluginName);
        }
        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyPaymentMethodCustomFields
     *
     * Modify custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentMethodId paymentMethodId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function modifyPaymentMethodCustomFields($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->modifyPaymentMethodCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation modifyPaymentMethodCustomFieldsWithHttpInfo
     *
     * Modify custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyPaymentMethodCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifyPaymentMethodCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation modifyPaymentMethodCustomFieldsAsync
     *
     * Modify custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyPaymentMethodCustomFieldsAsync($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->modifyPaymentMethodCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyPaymentMethodCustomFieldsAsyncWithHttpInfo
     *
     * Modify custom fields to payment method
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyPaymentMethodCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifyPaymentMethodCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyPaymentMethodCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentMethodId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyPaymentMethodCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentMethodId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyPaymentMethodCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling modifyPaymentMethodCustomFields'
            );
        }
        // verify the required parameter 'paymentMethodId' is set
        if ($paymentMethodId === null || (is_array($paymentMethodId) && count($paymentMethodId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentMethodId when calling modifyPaymentMethodCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/{paymentMethodId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentMethodId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($paymentMethodId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPaymentMethods
     *
     * Search payment methods
     *
     * @param string $searchKey searchKey (required)
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param string|null $pluginName pluginName (optional)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\PaymentMethod[]
     */
    public function searchPaymentMethods($searchKey, $offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->searchPaymentMethodsWithHttpInfo($searchKey, $offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation searchPaymentMethodsWithHttpInfo
     *
     * Search payment methods
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\PaymentMethod[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPaymentMethodsWithHttpInfo($searchKey, $offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod[]';
        $request = $this->searchPaymentMethodsRequest($searchKey, $offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\PaymentMethod[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPaymentMethodsAsync
     *
     * Search payment methods
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPaymentMethodsAsync($searchKey, $offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->searchPaymentMethodsAsyncWithHttpInfo($searchKey, $offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPaymentMethodsAsyncWithHttpInfo
     *
     * Search payment methods
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPaymentMethodsAsyncWithHttpInfo($searchKey, $offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\PaymentMethod[]';
        $request = $this->searchPaymentMethodsRequest($searchKey, $offset, $limit, $pluginName, $withPluginInfo, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPaymentMethods'
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPaymentMethodsRequest($searchKey, $offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'searchKey' is set
        if ($searchKey === null || (is_array($searchKey) && count($searchKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $searchKey when calling searchPaymentMethods'
            );
        }

        $resourcePath = '/1.0/kb/paymentMethods/search/{searchKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($pluginName !== null) {
            $queryParams['pluginName'] = ObjectSerializer::toQueryValue($pluginName);
        }
        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($searchKey !== null) {
            $resourcePath = str_replace(
                '{' . 'searchKey' . '}',
                ObjectSerializer::toPathValue($searchKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
    
    /**
     * Response handler
     *
     * @param Request  $request    Request
     * @param Response $response   Response
     * @param string   $returnType Return type
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @return array of returned object matching type, HTTP status code, HTTP response headers (array of strings)
     */
    protected function handleResponse($request, $response, $returnType)
    {
        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        if ($statusCode === 201 && $response->hasHeader('Location')) {
            // This is a Created redirection, getting the object from the location target
            $location = $response->getHeader('Location')[0];

            if (strpos($location, $this->config->getHost()) !== 0) {
                throw new ApiException(
                    sprintf(
                        '[%d] Received a location header not matching the configured host (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $options = $this->createHttpClientOption();
            $locationRequest = new Request(
                'GET',
                $location,
                $request->getHeaders()
            );
            $locationResponse = $this->client->send($locationRequest, $options);

            $responseBody = $locationResponse->getBody();
        } else {
            $responseBody = $response->getBody();
        }

        if ($returnType === null || $returnType === '') {
            $returnedObject = null;
        } else {
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            $returnedObject = ObjectSerializer::deserialize($content, $returnType, []);
        }

        return [
            $returnedObject,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }
}
