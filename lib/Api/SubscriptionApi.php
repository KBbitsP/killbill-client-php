<?php
/**
 * SubscriptionApi
 * PHP version 5
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.22.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\RequestOptions;
use Killbill\Client\Swagger\ApiException;
use Killbill\Client\Swagger\Configuration;
use Killbill\Client\Swagger\HeaderSelector;
use Killbill\Client\Swagger\ObjectSerializer;

/**
 * SubscriptionApi Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addSubscriptionBlockingState
     *
     * Block a subscription
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param \DateTime|null $requestedDate requestedDate (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\BlockingState[]
     */
    public function addSubscriptionBlockingState($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        list($response) = $this->addSubscriptionBlockingStateWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty);
        return $response;
    }

    /**
     * Operation addSubscriptionBlockingStateWithHttpInfo
     *
     * Block a subscription
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\BlockingState[], HTTP status code, HTTP response headers (array of strings)
     */
    public function addSubscriptionBlockingStateWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\BlockingState[]';
        $request = $this->addSubscriptionBlockingStateRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\BlockingState[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addSubscriptionBlockingStateAsync
     *
     * Block a subscription
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSubscriptionBlockingStateAsync($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        return $this->addSubscriptionBlockingStateAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSubscriptionBlockingStateAsyncWithHttpInfo
     *
     * Block a subscription
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSubscriptionBlockingStateAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\BlockingState[]';
        $request = $this->addSubscriptionBlockingStateRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addSubscriptionBlockingState'
     *
     * @param \Killbill\Client\Swagger\Model\BlockingState $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addSubscriptionBlockingStateRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addSubscriptionBlockingState'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling addSubscriptionBlockingState'
            );
        }
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling addSubscriptionBlockingState'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/block';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($requestedDate !== null) {
            $queryParams['requestedDate'] = ObjectSerializer::toQueryValue($requestedDate);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelSubscriptionPlan
     *
     * Cancel an entitlement plan
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param \DateTime|null $requestedDate requestedDate (optional)
     * @param bool|null $callCompletion callCompletion (optional, default to false)
     * @param int|null $callTimeoutSec callTimeoutSec (optional, default to 5)
     * @param string|null $entitlementPolicy entitlementPolicy (optional)
     * @param string|null $billingPolicy billingPolicy (optional)
     * @param bool|null $useRequestedDateForBilling useRequestedDateForBilling (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelSubscriptionPlan($subscriptionId, $xKillbillCreatedBy, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '5', $entitlementPolicy = null, $billingPolicy = null, $useRequestedDateForBilling = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->cancelSubscriptionPlanWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $requestedDate, $callCompletion, $callTimeoutSec, $entitlementPolicy, $billingPolicy, $useRequestedDateForBilling, $pluginProperty, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation cancelSubscriptionPlanWithHttpInfo
     *
     * Cancel an entitlement plan
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 5)
     * @param string $entitlementPolicy (optional)
     * @param string $billingPolicy (optional)
     * @param bool $useRequestedDateForBilling (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelSubscriptionPlanWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '5', $entitlementPolicy = null, $billingPolicy = null, $useRequestedDateForBilling = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->cancelSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $requestedDate, $callCompletion, $callTimeoutSec, $entitlementPolicy, $billingPolicy, $useRequestedDateForBilling, $pluginProperty, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelSubscriptionPlanAsync
     *
     * Cancel an entitlement plan
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 5)
     * @param string $entitlementPolicy (optional)
     * @param string $billingPolicy (optional)
     * @param bool $useRequestedDateForBilling (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSubscriptionPlanAsync($subscriptionId, $xKillbillCreatedBy, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '5', $entitlementPolicy = null, $billingPolicy = null, $useRequestedDateForBilling = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->cancelSubscriptionPlanAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $requestedDate, $callCompletion, $callTimeoutSec, $entitlementPolicy, $billingPolicy, $useRequestedDateForBilling, $pluginProperty, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelSubscriptionPlanAsyncWithHttpInfo
     *
     * Cancel an entitlement plan
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 5)
     * @param string $entitlementPolicy (optional)
     * @param string $billingPolicy (optional)
     * @param bool $useRequestedDateForBilling (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSubscriptionPlanAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '5', $entitlementPolicy = null, $billingPolicy = null, $useRequestedDateForBilling = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->cancelSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $requestedDate, $callCompletion, $callTimeoutSec, $entitlementPolicy, $billingPolicy, $useRequestedDateForBilling, $pluginProperty, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelSubscriptionPlan'
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 5)
     * @param string $entitlementPolicy (optional)
     * @param string $billingPolicy (optional)
     * @param bool $useRequestedDateForBilling (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '5', $entitlementPolicy = null, $billingPolicy = null, $useRequestedDateForBilling = 'false', $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling cancelSubscriptionPlan'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling cancelSubscriptionPlan'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($requestedDate !== null) {
            $queryParams['requestedDate'] = ObjectSerializer::toQueryValue($requestedDate);
        }
        // query params
        if ($callCompletion !== null) {
            $queryParams['callCompletion'] = ObjectSerializer::toQueryValue($callCompletion);
        }
        // query params
        if ($callTimeoutSec !== null) {
            $queryParams['callTimeoutSec'] = ObjectSerializer::toQueryValue($callTimeoutSec);
        }
        // query params
        if ($entitlementPolicy !== null) {
            $queryParams['entitlementPolicy'] = ObjectSerializer::toQueryValue($entitlementPolicy);
        }
        // query params
        if ($billingPolicy !== null) {
            $queryParams['billingPolicy'] = ObjectSerializer::toQueryValue($billingPolicy);
        }
        // query params
        if ($useRequestedDateForBilling !== null) {
            $queryParams['useRequestedDateForBilling'] = ObjectSerializer::toQueryValue($useRequestedDateForBilling);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changeSubscriptionPlan
     *
     * Change entitlement plan
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param \DateTime|null $requestedDate requestedDate (optional)
     * @param bool|null $callCompletion callCompletion (optional, default to false)
     * @param int|null $callTimeoutSec callTimeoutSec (optional, default to 3)
     * @param string|null $billingPolicy billingPolicy (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function changeSubscriptionPlan($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '3', $billingPolicy = null, $pluginProperty = null)
    {
        $this->changeSubscriptionPlanWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $callCompletion, $callTimeoutSec, $billingPolicy, $pluginProperty);
    }

    /**
     * Operation changeSubscriptionPlanWithHttpInfo
     *
     * Change entitlement plan
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string $billingPolicy (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeSubscriptionPlanWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '3', $billingPolicy = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->changeSubscriptionPlanRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $callCompletion, $callTimeoutSec, $billingPolicy, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation changeSubscriptionPlanAsync
     *
     * Change entitlement plan
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string $billingPolicy (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeSubscriptionPlanAsync($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '3', $billingPolicy = null, $pluginProperty = null)
    {
        return $this->changeSubscriptionPlanAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $callCompletion, $callTimeoutSec, $billingPolicy, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeSubscriptionPlanAsyncWithHttpInfo
     *
     * Change entitlement plan
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string $billingPolicy (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeSubscriptionPlanAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '3', $billingPolicy = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->changeSubscriptionPlanRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $requestedDate, $callCompletion, $callTimeoutSec, $billingPolicy, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeSubscriptionPlan'
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $requestedDate (optional)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string $billingPolicy (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changeSubscriptionPlanRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $requestedDate = null, $callCompletion = 'false', $callTimeoutSec = '3', $billingPolicy = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling changeSubscriptionPlan'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling changeSubscriptionPlan'
            );
        }
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling changeSubscriptionPlan'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($requestedDate !== null) {
            $queryParams['requestedDate'] = ObjectSerializer::toQueryValue($requestedDate);
        }
        // query params
        if ($callCompletion !== null) {
            $queryParams['callCompletion'] = ObjectSerializer::toQueryValue($callCompletion);
        }
        // query params
        if ($callTimeoutSec !== null) {
            $queryParams['callTimeoutSec'] = ObjectSerializer::toQueryValue($callTimeoutSec);
        }
        // query params
        if ($billingPolicy !== null) {
            $queryParams['billingPolicy'] = ObjectSerializer::toQueryValue($billingPolicy);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscription
     *
     * Create an subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param \DateTime|null $entitlementDate entitlementDate (optional)
     * @param \DateTime|null $billingDate billingDate (optional)
     * @param bool|null $renameKeyIfExistsAndUnused renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool|null $migrated migrated (optional, default to false)
     * @param bool|null $callCompletion callCompletion (optional, default to false)
     * @param int|null $callTimeoutSec callTimeoutSec (optional, default to 3)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Subscription
     */
    public function createSubscription($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        list($response) = $this->createSubscriptionWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty);
        return $response;
    }

    /**
     * Operation createSubscriptionWithHttpInfo
     *
     * Create an subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Subscription';
        $request = $this->createSubscriptionRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSubscriptionAsync
     *
     * Create an subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        return $this->createSubscriptionAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionAsyncWithHttpInfo
     *
     * Create an subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Subscription';
        $request = $this->createSubscriptionRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscription'
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubscriptionRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubscription'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createSubscription'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($entitlementDate !== null) {
            $queryParams['entitlementDate'] = ObjectSerializer::toQueryValue($entitlementDate);
        }
        // query params
        if ($billingDate !== null) {
            $queryParams['billingDate'] = ObjectSerializer::toQueryValue($billingDate);
        }
        // query params
        if ($renameKeyIfExistsAndUnused !== null) {
            $queryParams['renameKeyIfExistsAndUnused'] = ObjectSerializer::toQueryValue($renameKeyIfExistsAndUnused);
        }
        // query params
        if ($migrated !== null) {
            $queryParams['migrated'] = ObjectSerializer::toQueryValue($migrated);
        }
        // query params
        if ($callCompletion !== null) {
            $queryParams['callCompletion'] = ObjectSerializer::toQueryValue($callCompletion);
        }
        // query params
        if ($callTimeoutSec !== null) {
            $queryParams['callTimeoutSec'] = ObjectSerializer::toQueryValue($callTimeoutSec);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscriptionCustomFields
     *
     * Add custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createSubscriptionCustomFields($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->createSubscriptionCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation createSubscriptionCustomFieldsWithHttpInfo
     *
     * Add custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->createSubscriptionCustomFieldsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createSubscriptionCustomFieldsAsync
     *
     * Add custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionCustomFieldsAsync($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createSubscriptionCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionCustomFieldsAsyncWithHttpInfo
     *
     * Add custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->createSubscriptionCustomFieldsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriptionCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubscriptionCustomFieldsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubscriptionCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createSubscriptionCustomFields'
            );
        }
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling createSubscriptionCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscriptionTags
     *
     * @param string[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createSubscriptionTags($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->createSubscriptionTagsWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation createSubscriptionTagsWithHttpInfo
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionTagsWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->createSubscriptionTagsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createSubscriptionTagsAsync
     *
     * 
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionTagsAsync($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createSubscriptionTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionTagsAsyncWithHttpInfo
     *
     * 
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->createSubscriptionTagsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriptionTags'
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubscriptionTagsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubscriptionTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createSubscriptionTags'
            );
        }
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling createSubscriptionTags'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscriptionWithAddOns
     *
     * Create an entitlement with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\Subscription[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param \DateTime|null $entitlementDate entitlementDate (optional)
     * @param \DateTime|null $billingDate billingDate (optional)
     * @param bool|null $migrated migrated (optional, default to false)
     * @param bool|null $renameKeyIfExistsAndUnused renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool|null $callCompletion callCompletion (optional, default to false)
     * @param int|null $callTimeoutSec callTimeoutSec (optional, default to 3)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Bundle
     */
    public function createSubscriptionWithAddOns($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $migrated = 'false', $renameKeyIfExistsAndUnused = 'true', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        list($response) = $this->createSubscriptionWithAddOnsWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $migrated, $renameKeyIfExistsAndUnused, $callCompletion, $callTimeoutSec, $pluginProperty);
        return $response;
    }

    /**
     * Operation createSubscriptionWithAddOnsWithHttpInfo
     *
     * Create an entitlement with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\Subscription[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $migrated (optional, default to false)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Bundle, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionWithAddOnsWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $migrated = 'false', $renameKeyIfExistsAndUnused = 'true', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle';
        $request = $this->createSubscriptionWithAddOnsRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $migrated, $renameKeyIfExistsAndUnused, $callCompletion, $callTimeoutSec, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Bundle',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSubscriptionWithAddOnsAsync
     *
     * Create an entitlement with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\Subscription[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $migrated (optional, default to false)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionWithAddOnsAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $migrated = 'false', $renameKeyIfExistsAndUnused = 'true', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        return $this->createSubscriptionWithAddOnsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $migrated, $renameKeyIfExistsAndUnused, $callCompletion, $callTimeoutSec, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionWithAddOnsAsyncWithHttpInfo
     *
     * Create an entitlement with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\Subscription[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $migrated (optional, default to false)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionWithAddOnsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $migrated = 'false', $renameKeyIfExistsAndUnused = 'true', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle';
        $request = $this->createSubscriptionWithAddOnsRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $migrated, $renameKeyIfExistsAndUnused, $callCompletion, $callTimeoutSec, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriptionWithAddOns'
     *
     * @param \Killbill\Client\Swagger\Model\Subscription[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $migrated (optional, default to false)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubscriptionWithAddOnsRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $migrated = 'false', $renameKeyIfExistsAndUnused = 'true', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubscriptionWithAddOns'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createSubscriptionWithAddOns'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/createSubscriptionWithAddOns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($entitlementDate !== null) {
            $queryParams['entitlementDate'] = ObjectSerializer::toQueryValue($entitlementDate);
        }
        // query params
        if ($billingDate !== null) {
            $queryParams['billingDate'] = ObjectSerializer::toQueryValue($billingDate);
        }
        // query params
        if ($migrated !== null) {
            $queryParams['migrated'] = ObjectSerializer::toQueryValue($migrated);
        }
        // query params
        if ($renameKeyIfExistsAndUnused !== null) {
            $queryParams['renameKeyIfExistsAndUnused'] = ObjectSerializer::toQueryValue($renameKeyIfExistsAndUnused);
        }
        // query params
        if ($callCompletion !== null) {
            $queryParams['callCompletion'] = ObjectSerializer::toQueryValue($callCompletion);
        }
        // query params
        if ($callTimeoutSec !== null) {
            $queryParams['callTimeoutSec'] = ObjectSerializer::toQueryValue($callTimeoutSec);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscriptionsWithAddOns
     *
     * Create multiple entitlements with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\BulkSubscriptionsBundle[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param \DateTime|null $entitlementDate entitlementDate (optional)
     * @param \DateTime|null $billingDate billingDate (optional)
     * @param bool|null $renameKeyIfExistsAndUnused renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool|null $migrated migrated (optional, default to false)
     * @param bool|null $callCompletion callCompletion (optional, default to false)
     * @param int|null $callTimeoutSec callTimeoutSec (optional, default to 3)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Bundle[]
     */
    public function createSubscriptionsWithAddOns($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        list($response) = $this->createSubscriptionsWithAddOnsWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty);
        return $response;
    }

    /**
     * Operation createSubscriptionsWithAddOnsWithHttpInfo
     *
     * Create multiple entitlements with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\BulkSubscriptionsBundle[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Bundle[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionsWithAddOnsWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle[]';
        $request = $this->createSubscriptionsWithAddOnsRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Bundle[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSubscriptionsWithAddOnsAsync
     *
     * Create multiple entitlements with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\BulkSubscriptionsBundle[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionsWithAddOnsAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        return $this->createSubscriptionsWithAddOnsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionsWithAddOnsAsyncWithHttpInfo
     *
     * Create multiple entitlements with addOn products
     *
     * @param \Killbill\Client\Swagger\Model\BulkSubscriptionsBundle[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionsWithAddOnsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Bundle[]';
        $request = $this->createSubscriptionsWithAddOnsRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $entitlementDate, $billingDate, $renameKeyIfExistsAndUnused, $migrated, $callCompletion, $callTimeoutSec, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriptionsWithAddOns'
     *
     * @param \Killbill\Client\Swagger\Model\BulkSubscriptionsBundle[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $entitlementDate (optional)
     * @param \DateTime $billingDate (optional)
     * @param bool $renameKeyIfExistsAndUnused (optional, default to true)
     * @param bool $migrated (optional, default to false)
     * @param bool $callCompletion (optional, default to false)
     * @param int $callTimeoutSec (optional, default to 3)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubscriptionsWithAddOnsRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $entitlementDate = null, $billingDate = null, $renameKeyIfExistsAndUnused = 'true', $migrated = 'false', $callCompletion = 'false', $callTimeoutSec = '3', $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSubscriptionsWithAddOns'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createSubscriptionsWithAddOns'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/createSubscriptionsWithAddOns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($entitlementDate !== null) {
            $queryParams['entitlementDate'] = ObjectSerializer::toQueryValue($entitlementDate);
        }
        // query params
        if ($billingDate !== null) {
            $queryParams['billingDate'] = ObjectSerializer::toQueryValue($billingDate);
        }
        // query params
        if ($renameKeyIfExistsAndUnused !== null) {
            $queryParams['renameKeyIfExistsAndUnused'] = ObjectSerializer::toQueryValue($renameKeyIfExistsAndUnused);
        }
        // query params
        if ($migrated !== null) {
            $queryParams['migrated'] = ObjectSerializer::toQueryValue($migrated);
        }
        // query params
        if ($callCompletion !== null) {
            $queryParams['callCompletion'] = ObjectSerializer::toQueryValue($callCompletion);
        }
        // query params
        if ($callTimeoutSec !== null) {
            $queryParams['callTimeoutSec'] = ObjectSerializer::toQueryValue($callTimeoutSec);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscriptionCustomFields
     *
     * Remove custom fields from subscription
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $customField customField (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSubscriptionCustomFields($subscriptionId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deleteSubscriptionCustomFieldsWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deleteSubscriptionCustomFieldsWithHttpInfo
     *
     * Remove custom fields from subscription
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriptionCustomFieldsWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteSubscriptionCustomFieldsRequest($subscriptionId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionCustomFieldsAsync
     *
     * Remove custom fields from subscription
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionCustomFieldsAsync($subscriptionId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deleteSubscriptionCustomFieldsAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriptionCustomFieldsAsyncWithHttpInfo
     *
     * Remove custom fields from subscription
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionCustomFieldsAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteSubscriptionCustomFieldsRequest($subscriptionId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscriptionCustomFields'
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubscriptionCustomFieldsRequest($subscriptionId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling deleteSubscriptionCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deleteSubscriptionCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($customField)) {
            $customField = ObjectSerializer::serializeCollection($customField, /*'multi'*/'csv', true);
        }
        if ($customField !== null) {
            $queryParams['customField'] = ObjectSerializer::toQueryValue($customField);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscriptionTags
     *
     * Remove tags from subscription
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $tagDef tagDef (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSubscriptionTags($subscriptionId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deleteSubscriptionTagsWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deleteSubscriptionTagsWithHttpInfo
     *
     * Remove tags from subscription
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriptionTagsWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteSubscriptionTagsRequest($subscriptionId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionTagsAsync
     *
     * Remove tags from subscription
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionTagsAsync($subscriptionId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deleteSubscriptionTagsAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriptionTagsAsyncWithHttpInfo
     *
     * Remove tags from subscription
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionTagsAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deleteSubscriptionTagsRequest($subscriptionId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscriptionTags'
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubscriptionTagsRequest($subscriptionId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling deleteSubscriptionTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deleteSubscriptionTags'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($tagDef)) {
            $tagDef = ObjectSerializer::serializeCollection($tagDef, /*'multi'*/'csv', true);
        }
        if ($tagDef !== null) {
            $queryParams['tagDef'] = ObjectSerializer::toQueryValue($tagDef);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscription
     *
     * Retrieve a subscription by id
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Subscription
     */
    public function getSubscription($subscriptionId, $audit = 'NONE')
    {
        list($response) = $this->getSubscriptionWithHttpInfo($subscriptionId, $audit);
        return $response;
    }

    /**
     * Operation getSubscriptionWithHttpInfo
     *
     * Retrieve a subscription by id
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionWithHttpInfo($subscriptionId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Subscription';
        $request = $this->getSubscriptionRequest($subscriptionId, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionAsync
     *
     * Retrieve a subscription by id
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAsync($subscriptionId, $audit = 'NONE')
    {
        return $this->getSubscriptionAsyncWithHttpInfo($subscriptionId, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionAsyncWithHttpInfo
     *
     * Retrieve a subscription by id
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAsyncWithHttpInfo($subscriptionId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Subscription';
        $request = $this->getSubscriptionRequest($subscriptionId, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscription'
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionRequest($subscriptionId, $audit = 'NONE')
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling getSubscription'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionAuditLogsWithHistory
     *
     * Retrieve subscription audit logs with history by id
     *
     * @param string $subscriptionId subscriptionId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getSubscriptionAuditLogsWithHistory($subscriptionId)
    {
        list($response) = $this->getSubscriptionAuditLogsWithHistoryWithHttpInfo($subscriptionId);
        return $response;
    }

    /**
     * Operation getSubscriptionAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve subscription audit logs with history by id
     *
     * @param string $subscriptionId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionAuditLogsWithHistoryWithHttpInfo($subscriptionId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getSubscriptionAuditLogsWithHistoryRequest($subscriptionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionAuditLogsWithHistoryAsync
     *
     * Retrieve subscription audit logs with history by id
     *
     * @param string $subscriptionId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAuditLogsWithHistoryAsync($subscriptionId)
    {
        return $this->getSubscriptionAuditLogsWithHistoryAsyncWithHttpInfo($subscriptionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve subscription audit logs with history by id
     *
     * @param string $subscriptionId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAuditLogsWithHistoryAsyncWithHttpInfo($subscriptionId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getSubscriptionAuditLogsWithHistoryRequest($subscriptionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionAuditLogsWithHistory'
     *
     * @param string $subscriptionId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionAuditLogsWithHistoryRequest($subscriptionId)
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling getSubscriptionAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionByKey
     *
     * Retrieve a subscription by external key
     *
     * @param string $externalKey externalKey (required)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Subscription
     */
    public function getSubscriptionByKey($externalKey, $audit = 'NONE')
    {
        list($response) = $this->getSubscriptionByKeyWithHttpInfo($externalKey, $audit);
        return $response;
    }

    /**
     * Operation getSubscriptionByKeyWithHttpInfo
     *
     * Retrieve a subscription by external key
     *
     * @param string $externalKey (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionByKeyWithHttpInfo($externalKey, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Subscription';
        $request = $this->getSubscriptionByKeyRequest($externalKey, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionByKeyAsync
     *
     * Retrieve a subscription by external key
     *
     * @param string $externalKey (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionByKeyAsync($externalKey, $audit = 'NONE')
    {
        return $this->getSubscriptionByKeyAsyncWithHttpInfo($externalKey, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionByKeyAsyncWithHttpInfo
     *
     * Retrieve a subscription by external key
     *
     * @param string $externalKey (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionByKeyAsyncWithHttpInfo($externalKey, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Subscription';
        $request = $this->getSubscriptionByKeyRequest($externalKey, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionByKey'
     *
     * @param string $externalKey (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionByKeyRequest($externalKey, $audit = 'NONE')
    {
        // verify the required parameter 'externalKey' is set
        if ($externalKey === null || (is_array($externalKey) && count($externalKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalKey when calling getSubscriptionByKey'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($externalKey !== null) {
            $queryParams['externalKey'] = ObjectSerializer::toQueryValue($externalKey);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionCustomFields
     *
     * Retrieve subscription custom fields
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function getSubscriptionCustomFields($subscriptionId, $audit = 'NONE')
    {
        list($response) = $this->getSubscriptionCustomFieldsWithHttpInfo($subscriptionId, $audit);
        return $response;
    }

    /**
     * Operation getSubscriptionCustomFieldsWithHttpInfo
     *
     * Retrieve subscription custom fields
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionCustomFieldsWithHttpInfo($subscriptionId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getSubscriptionCustomFieldsRequest($subscriptionId, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionCustomFieldsAsync
     *
     * Retrieve subscription custom fields
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionCustomFieldsAsync($subscriptionId, $audit = 'NONE')
    {
        return $this->getSubscriptionCustomFieldsAsyncWithHttpInfo($subscriptionId, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionCustomFieldsAsyncWithHttpInfo
     *
     * Retrieve subscription custom fields
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionCustomFieldsAsyncWithHttpInfo($subscriptionId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getSubscriptionCustomFieldsRequest($subscriptionId, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionCustomFields'
     *
     * @param string $subscriptionId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionCustomFieldsRequest($subscriptionId, $audit = 'NONE')
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling getSubscriptionCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionEventAuditLogsWithHistory
     *
     * Retrieve subscription event audit logs with history by id
     *
     * @param string $eventId eventId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getSubscriptionEventAuditLogsWithHistory($eventId)
    {
        list($response) = $this->getSubscriptionEventAuditLogsWithHistoryWithHttpInfo($eventId);
        return $response;
    }

    /**
     * Operation getSubscriptionEventAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve subscription event audit logs with history by id
     *
     * @param string $eventId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionEventAuditLogsWithHistoryWithHttpInfo($eventId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getSubscriptionEventAuditLogsWithHistoryRequest($eventId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionEventAuditLogsWithHistoryAsync
     *
     * Retrieve subscription event audit logs with history by id
     *
     * @param string $eventId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionEventAuditLogsWithHistoryAsync($eventId)
    {
        return $this->getSubscriptionEventAuditLogsWithHistoryAsyncWithHttpInfo($eventId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionEventAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve subscription event audit logs with history by id
     *
     * @param string $eventId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionEventAuditLogsWithHistoryAsyncWithHttpInfo($eventId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getSubscriptionEventAuditLogsWithHistoryRequest($eventId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionEventAuditLogsWithHistory'
     *
     * @param string $eventId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionEventAuditLogsWithHistoryRequest($eventId)
    {
        // verify the required parameter 'eventId' is set
        if ($eventId === null || (is_array($eventId) && count($eventId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventId when calling getSubscriptionEventAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/events/{eventId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($eventId !== null) {
            $resourcePath = str_replace(
                '{' . 'eventId' . '}',
                ObjectSerializer::toPathValue($eventId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionTags
     *
     * Retrieve subscription tags
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param bool|null $includedDeleted includedDeleted (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function getSubscriptionTags($subscriptionId, $includedDeleted = 'false', $audit = 'NONE')
    {
        list($response) = $this->getSubscriptionTagsWithHttpInfo($subscriptionId, $includedDeleted, $audit);
        return $response;
    }

    /**
     * Operation getSubscriptionTagsWithHttpInfo
     *
     * Retrieve subscription tags
     *
     * @param string $subscriptionId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionTagsWithHttpInfo($subscriptionId, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getSubscriptionTagsRequest($subscriptionId, $includedDeleted, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionTagsAsync
     *
     * Retrieve subscription tags
     *
     * @param string $subscriptionId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionTagsAsync($subscriptionId, $includedDeleted = 'false', $audit = 'NONE')
    {
        return $this->getSubscriptionTagsAsyncWithHttpInfo($subscriptionId, $includedDeleted, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionTagsAsyncWithHttpInfo
     *
     * Retrieve subscription tags
     *
     * @param string $subscriptionId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionTagsAsyncWithHttpInfo($subscriptionId, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getSubscriptionTagsRequest($subscriptionId, $includedDeleted, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionTags'
     *
     * @param string $subscriptionId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionTagsRequest($subscriptionId, $includedDeleted = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling getSubscriptionTags'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifySubscriptionCustomFields
     *
     * Modify custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function modifySubscriptionCustomFields($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->modifySubscriptionCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation modifySubscriptionCustomFieldsWithHttpInfo
     *
     * Modify custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifySubscriptionCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifySubscriptionCustomFieldsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation modifySubscriptionCustomFieldsAsync
     *
     * Modify custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifySubscriptionCustomFieldsAsync($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->modifySubscriptionCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifySubscriptionCustomFieldsAsyncWithHttpInfo
     *
     * Modify custom fields to subscription
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifySubscriptionCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifySubscriptionCustomFieldsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifySubscriptionCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifySubscriptionCustomFieldsRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifySubscriptionCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling modifySubscriptionCustomFields'
            );
        }
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling modifySubscriptionCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uncancelSubscriptionPlan
     *
     * Un-cancel an entitlement
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uncancelSubscriptionPlan($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->uncancelSubscriptionPlanWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation uncancelSubscriptionPlanWithHttpInfo
     *
     * Un-cancel an entitlement
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uncancelSubscriptionPlanWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->uncancelSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation uncancelSubscriptionPlanAsync
     *
     * Un-cancel an entitlement
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uncancelSubscriptionPlanAsync($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->uncancelSubscriptionPlanAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uncancelSubscriptionPlanAsyncWithHttpInfo
     *
     * Un-cancel an entitlement
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uncancelSubscriptionPlanAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->uncancelSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uncancelSubscriptionPlan'
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uncancelSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling uncancelSubscriptionPlan'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling uncancelSubscriptionPlan'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/uncancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation undoChangeSubscriptionPlan
     *
     * Undo a pending change plan on an entitlement
     *
     * @param string $subscriptionId subscriptionId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function undoChangeSubscriptionPlan($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->undoChangeSubscriptionPlanWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation undoChangeSubscriptionPlanWithHttpInfo
     *
     * Undo a pending change plan on an entitlement
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function undoChangeSubscriptionPlanWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->undoChangeSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation undoChangeSubscriptionPlanAsync
     *
     * Undo a pending change plan on an entitlement
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function undoChangeSubscriptionPlanAsync($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->undoChangeSubscriptionPlanAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation undoChangeSubscriptionPlanAsyncWithHttpInfo
     *
     * Undo a pending change plan on an entitlement
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function undoChangeSubscriptionPlanAsyncWithHttpInfo($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->undoChangeSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $pluginProperty, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'undoChangeSubscriptionPlan'
     *
     * @param string $subscriptionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $pluginProperty (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function undoChangeSubscriptionPlanRequest($subscriptionId, $xKillbillCreatedBy, $pluginProperty = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling undoChangeSubscriptionPlan'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling undoChangeSubscriptionPlan'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/undoChangePlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscriptionBCD
     *
     * Update the BCD associated to a subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $subscriptionId subscriptionId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param \DateTime|null $effectiveFromDate effectiveFromDate (optional)
     * @param bool|null $forceNewBcdWithPastEffectiveDate forceNewBcdWithPastEffectiveDate (optional, default to false)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateSubscriptionBCD($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $effectiveFromDate = null, $forceNewBcdWithPastEffectiveDate = 'false')
    {
        $this->updateSubscriptionBCDWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $effectiveFromDate, $forceNewBcdWithPastEffectiveDate);
    }

    /**
     * Operation updateSubscriptionBCDWithHttpInfo
     *
     * Update the BCD associated to a subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $effectiveFromDate (optional)
     * @param bool $forceNewBcdWithPastEffectiveDate (optional, default to false)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriptionBCDWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $effectiveFromDate = null, $forceNewBcdWithPastEffectiveDate = 'false')
    {
        $returnType = null;
        $request = $this->updateSubscriptionBCDRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $effectiveFromDate, $forceNewBcdWithPastEffectiveDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubscriptionBCDAsync
     *
     * Update the BCD associated to a subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $effectiveFromDate (optional)
     * @param bool $forceNewBcdWithPastEffectiveDate (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionBCDAsync($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $effectiveFromDate = null, $forceNewBcdWithPastEffectiveDate = 'false')
    {
        return $this->updateSubscriptionBCDAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $effectiveFromDate, $forceNewBcdWithPastEffectiveDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriptionBCDAsyncWithHttpInfo
     *
     * Update the BCD associated to a subscription
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $effectiveFromDate (optional)
     * @param bool $forceNewBcdWithPastEffectiveDate (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionBCDAsyncWithHttpInfo($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $effectiveFromDate = null, $forceNewBcdWithPastEffectiveDate = 'false')
    {
        $returnType = null;
        $request = $this->updateSubscriptionBCDRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason, $xKillbillComment, $effectiveFromDate, $forceNewBcdWithPastEffectiveDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscriptionBCD'
     *
     * @param \Killbill\Client\Swagger\Model\Subscription $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $subscriptionId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param \DateTime $effectiveFromDate (optional)
     * @param bool $forceNewBcdWithPastEffectiveDate (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSubscriptionBCDRequest($body, $xKillbillCreatedBy, $subscriptionId, $xKillbillReason = null, $xKillbillComment = null, $effectiveFromDate = null, $forceNewBcdWithPastEffectiveDate = 'false')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateSubscriptionBCD'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling updateSubscriptionBCD'
            );
        }
        // verify the required parameter 'subscriptionId' is set
        if ($subscriptionId === null || (is_array($subscriptionId) && count($subscriptionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriptionId when calling updateSubscriptionBCD'
            );
        }

        $resourcePath = '/1.0/kb/subscriptions/{subscriptionId}/bcd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($effectiveFromDate !== null) {
            $queryParams['effectiveFromDate'] = ObjectSerializer::toQueryValue($effectiveFromDate);
        }
        // query params
        if ($forceNewBcdWithPastEffectiveDate !== null) {
            $queryParams['forceNewBcdWithPastEffectiveDate'] = ObjectSerializer::toQueryValue($forceNewBcdWithPastEffectiveDate);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($subscriptionId !== null) {
            $resourcePath = str_replace(
                '{' . 'subscriptionId' . '}',
                ObjectSerializer::toPathValue($subscriptionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
    
    /**
     * Response handler
     *
     * @param Request  $request    Request
     * @param Response $response   Response
     * @param string   $returnType Return type
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @return array of returned object matching type, HTTP status code, HTTP response headers (array of strings)
     */
    protected function handleResponse($request, $response, $returnType)
    {
        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        if ($statusCode === 201 && $response->hasHeader('Location')) {
            // This is a Created redirection, getting the object from the location target
            $location = $response->getHeader('Location')[0];

            if (strpos($location, $this->config->getHost()) !== 0) {
                throw new ApiException(
                    sprintf(
                        '[%d] Received a location header not matching the configured host (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $options = $this->createHttpClientOption();
            $locationRequest = new Request(
                'GET',
                $location,
                $request->getHeaders()
            );
            $locationResponse = $this->client->send($locationRequest, $options);

            $responseBody = $locationResponse->getBody();
        } else {
            $responseBody = $response->getBody();
        }

        if ($returnType === null || $returnType === '') {
            $returnedObject = null;
        } else {
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            $returnedObject = ObjectSerializer::deserialize($content, $returnType, []);
        }

        return [
            $returnedObject,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }
}
