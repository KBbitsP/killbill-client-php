<?php
/**
 * PaymentApi
 * PHP version 5
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.22.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\RequestOptions;
use Killbill\Client\Swagger\ApiException;
use Killbill\Client\Swagger\Configuration;
use Killbill\Client\Swagger\HeaderSelector;
use Killbill\Client\Swagger\ObjectSerializer;

/**
 * PaymentApi Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelScheduledPaymentTransactionByExternalKey
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $transactionExternalKey transactionExternalKey (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelScheduledPaymentTransactionByExternalKey($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->cancelScheduledPaymentTransactionByExternalKeyWithHttpInfo($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation cancelScheduledPaymentTransactionByExternalKeyWithHttpInfo
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $transactionExternalKey (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelScheduledPaymentTransactionByExternalKeyWithHttpInfo($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->cancelScheduledPaymentTransactionByExternalKeyRequest($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelScheduledPaymentTransactionByExternalKeyAsync
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $transactionExternalKey (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelScheduledPaymentTransactionByExternalKeyAsync($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->cancelScheduledPaymentTransactionByExternalKeyAsyncWithHttpInfo($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelScheduledPaymentTransactionByExternalKeyAsyncWithHttpInfo
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $transactionExternalKey (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelScheduledPaymentTransactionByExternalKeyAsyncWithHttpInfo($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->cancelScheduledPaymentTransactionByExternalKeyRequest($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelScheduledPaymentTransactionByExternalKey'
     *
     * @param string $transactionExternalKey (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelScheduledPaymentTransactionByExternalKeyRequest($transactionExternalKey, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'transactionExternalKey' is set
        if ($transactionExternalKey === null || (is_array($transactionExternalKey) && count($transactionExternalKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transactionExternalKey when calling cancelScheduledPaymentTransactionByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling cancelScheduledPaymentTransactionByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments/cancelScheduledPaymentTransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transactionExternalKey !== null) {
            $queryParams['transactionExternalKey'] = ObjectSerializer::toQueryValue($transactionExternalKey);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelScheduledPaymentTransactionById
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $paymentTransactionId paymentTransactionId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelScheduledPaymentTransactionById($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->cancelScheduledPaymentTransactionByIdWithHttpInfo($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation cancelScheduledPaymentTransactionByIdWithHttpInfo
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $paymentTransactionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelScheduledPaymentTransactionByIdWithHttpInfo($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->cancelScheduledPaymentTransactionByIdRequest($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelScheduledPaymentTransactionByIdAsync
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $paymentTransactionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelScheduledPaymentTransactionByIdAsync($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->cancelScheduledPaymentTransactionByIdAsyncWithHttpInfo($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelScheduledPaymentTransactionByIdAsyncWithHttpInfo
     *
     * Cancels a scheduled payment attempt retry
     *
     * @param string $paymentTransactionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelScheduledPaymentTransactionByIdAsyncWithHttpInfo($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->cancelScheduledPaymentTransactionByIdRequest($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelScheduledPaymentTransactionById'
     *
     * @param string $paymentTransactionId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelScheduledPaymentTransactionByIdRequest($paymentTransactionId, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'paymentTransactionId' is set
        if ($paymentTransactionId === null || (is_array($paymentTransactionId) && count($paymentTransactionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentTransactionId when calling cancelScheduledPaymentTransactionById'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling cancelScheduledPaymentTransactionById'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentTransactionId}/cancelScheduledPaymentTransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentTransactionId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentTransactionId' . '}',
                ObjectSerializer::toPathValue($paymentTransactionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation captureAuthorization
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function captureAuthorization($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->captureAuthorizationWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation captureAuthorizationWithHttpInfo
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureAuthorizationWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->captureAuthorizationRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureAuthorizationAsync
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAuthorizationAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->captureAuthorizationAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureAuthorizationAsyncWithHttpInfo
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAuthorizationAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->captureAuthorizationRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureAuthorization'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function captureAuthorizationRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling captureAuthorization'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling captureAuthorization'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling captureAuthorization'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation captureAuthorizationByExternalKey
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function captureAuthorizationByExternalKey($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->captureAuthorizationByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation captureAuthorizationByExternalKeyWithHttpInfo
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureAuthorizationByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->captureAuthorizationByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureAuthorizationByExternalKeyAsync
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAuthorizationByExternalKeyAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->captureAuthorizationByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureAuthorizationByExternalKeyAsyncWithHttpInfo
     *
     * Capture an existing authorization
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAuthorizationByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->captureAuthorizationByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureAuthorizationByExternalKey'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function captureAuthorizationByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling captureAuthorizationByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling captureAuthorizationByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chargebackPayment
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function chargebackPayment($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->chargebackPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation chargebackPaymentWithHttpInfo
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function chargebackPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chargebackPaymentAsync
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackPaymentAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->chargebackPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chargebackPaymentAsyncWithHttpInfo
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chargebackPayment'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chargebackPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling chargebackPayment'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling chargebackPayment'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling chargebackPayment'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/chargebacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chargebackPaymentByExternalKey
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function chargebackPaymentByExternalKey($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->chargebackPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation chargebackPaymentByExternalKeyWithHttpInfo
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function chargebackPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chargebackPaymentByExternalKeyAsync
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackPaymentByExternalKeyAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->chargebackPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chargebackPaymentByExternalKeyAsyncWithHttpInfo
     *
     * Record a chargeback
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chargebackPaymentByExternalKey'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chargebackPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling chargebackPaymentByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling chargebackPaymentByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments/chargebacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chargebackReversalPayment
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function chargebackReversalPayment($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->chargebackReversalPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation chargebackReversalPaymentWithHttpInfo
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function chargebackReversalPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackReversalPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chargebackReversalPaymentAsync
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackReversalPaymentAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->chargebackReversalPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chargebackReversalPaymentAsyncWithHttpInfo
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackReversalPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackReversalPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chargebackReversalPayment'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chargebackReversalPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling chargebackReversalPayment'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling chargebackReversalPayment'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling chargebackReversalPayment'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/chargebackReversals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chargebackReversalPaymentByExternalKey
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function chargebackReversalPaymentByExternalKey($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->chargebackReversalPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation chargebackReversalPaymentByExternalKeyWithHttpInfo
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function chargebackReversalPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackReversalPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chargebackReversalPaymentByExternalKeyAsync
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackReversalPaymentByExternalKeyAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->chargebackReversalPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chargebackReversalPaymentByExternalKeyAsyncWithHttpInfo
     *
     * Record a chargeback reversal
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackReversalPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->chargebackReversalPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chargebackReversalPaymentByExternalKey'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chargebackReversalPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling chargebackReversalPaymentByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling chargebackReversalPaymentByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments/chargebackReversals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completeTransaction
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function completeTransaction($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $this->completeTransactionWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
    }

    /**
     * Operation completeTransactionWithHttpInfo
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function completeTransactionWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->completeTransactionRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation completeTransactionAsync
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeTransactionAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->completeTransactionAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completeTransactionAsyncWithHttpInfo
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeTransactionAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->completeTransactionRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completeTransaction'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function completeTransactionRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling completeTransaction'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling completeTransaction'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling completeTransaction'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completeTransactionByExternalKey
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function completeTransactionByExternalKey($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $this->completeTransactionByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
    }

    /**
     * Operation completeTransactionByExternalKeyWithHttpInfo
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function completeTransactionByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->completeTransactionByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation completeTransactionByExternalKeyAsync
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeTransactionByExternalKeyAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->completeTransactionByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completeTransactionByExternalKeyAsyncWithHttpInfo
     *
     * Complete an existing transaction
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeTransactionByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->completeTransactionByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completeTransactionByExternalKey'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function completeTransactionByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling completeTransactionByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling completeTransactionByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createComboPayment
     *
     * Combo api to create a new payment transaction on a existing (or not) account
     *
     * @param \Killbill\Client\Swagger\Model\ComboPaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function createComboPayment($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null)
    {
        list($response) = $this->createComboPaymentWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName);
        return $response;
    }

    /**
     * Operation createComboPaymentWithHttpInfo
     *
     * Combo api to create a new payment transaction on a existing (or not) account
     *
     * @param \Killbill\Client\Swagger\Model\ComboPaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function createComboPaymentWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->createComboPaymentRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createComboPaymentAsync
     *
     * Combo api to create a new payment transaction on a existing (or not) account
     *
     * @param \Killbill\Client\Swagger\Model\ComboPaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createComboPaymentAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null)
    {
        return $this->createComboPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createComboPaymentAsyncWithHttpInfo
     *
     * Combo api to create a new payment transaction on a existing (or not) account
     *
     * @param \Killbill\Client\Swagger\Model\ComboPaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createComboPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->createComboPaymentRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createComboPayment'
     *
     * @param \Killbill\Client\Swagger\Model\ComboPaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createComboPaymentRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createComboPayment'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createComboPayment'
            );
        }

        $resourcePath = '/1.0/kb/payments/combo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentCustomFields
     *
     * Add custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function createPaymentCustomFields($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createPaymentCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createPaymentCustomFieldsWithHttpInfo
     *
     * Add custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createPaymentCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentCustomFieldsAsync
     *
     * Add custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentCustomFieldsAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createPaymentCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentCustomFieldsAsyncWithHttpInfo
     *
     * Add custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->createPaymentCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createPaymentCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createPaymentCustomFields'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling createPaymentCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPaymentTags
     *
     * Add tags to payment payment
     *
     * @param string[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function createPaymentTags($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        list($response) = $this->createPaymentTagsWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);
        return $response;
    }

    /**
     * Operation createPaymentTagsWithHttpInfo
     *
     * Add tags to payment payment
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createPaymentTagsWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->createPaymentTagsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPaymentTagsAsync
     *
     * Add tags to payment payment
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentTagsAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->createPaymentTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPaymentTagsAsyncWithHttpInfo
     *
     * Add tags to payment payment
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPaymentTagsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->createPaymentTagsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPaymentTags'
     *
     * @param string[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPaymentTagsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createPaymentTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling createPaymentTags'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling createPaymentTags'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaymentCustomFields
     *
     * Remove custom fields from payment payment
     *
     * @param string $paymentId paymentId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $customField customField (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePaymentCustomFields($paymentId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deletePaymentCustomFieldsWithHttpInfo($paymentId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deletePaymentCustomFieldsWithHttpInfo
     *
     * Remove custom fields from payment payment
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentCustomFieldsWithHttpInfo($paymentId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentCustomFieldsRequest($paymentId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaymentCustomFieldsAsync
     *
     * Remove custom fields from payment payment
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentCustomFieldsAsync($paymentId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deletePaymentCustomFieldsAsyncWithHttpInfo($paymentId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentCustomFieldsAsyncWithHttpInfo
     *
     * Remove custom fields from payment payment
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentCustomFieldsAsyncWithHttpInfo($paymentId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentCustomFieldsRequest($paymentId, $xKillbillCreatedBy, $customField, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaymentCustomFields'
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $customField (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePaymentCustomFieldsRequest($paymentId, $xKillbillCreatedBy, $customField = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling deletePaymentCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deletePaymentCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($customField)) {
            $customField = ObjectSerializer::serializeCollection($customField, /*'multi'*/'csv', true);
        }
        if ($customField !== null) {
            $queryParams['customField'] = ObjectSerializer::toQueryValue($customField);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePaymentTags
     *
     * Remove tags from payment payment
     *
     * @param string $paymentId paymentId (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string[]|null $tagDef tagDef (optional)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePaymentTags($paymentId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->deletePaymentTagsWithHttpInfo($paymentId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation deletePaymentTagsWithHttpInfo
     *
     * Remove tags from payment payment
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePaymentTagsWithHttpInfo($paymentId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentTagsRequest($paymentId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePaymentTagsAsync
     *
     * Remove tags from payment payment
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentTagsAsync($paymentId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->deletePaymentTagsAsyncWithHttpInfo($paymentId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePaymentTagsAsyncWithHttpInfo
     *
     * Remove tags from payment payment
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePaymentTagsAsyncWithHttpInfo($paymentId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->deletePaymentTagsRequest($paymentId, $xKillbillCreatedBy, $tagDef, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePaymentTags'
     *
     * @param string $paymentId (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string[] $tagDef (optional)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePaymentTagsRequest($paymentId, $xKillbillCreatedBy, $tagDef = null, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling deletePaymentTags'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling deletePaymentTags'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($tagDef)) {
            $tagDef = ObjectSerializer::serializeCollection($tagDef, /*'multi'*/'csv', true);
        }
        if ($tagDef !== null) {
            $queryParams['tagDef'] = ObjectSerializer::toQueryValue($tagDef);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayment
     *
     * Retrieve a payment by id
     *
     * @param string $paymentId paymentId (required)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param bool|null $withAttempts withAttempts (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function getPayment($paymentId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentWithHttpInfo($paymentId, $withPluginInfo, $withAttempts, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentWithHttpInfo
     *
     * Retrieve a payment by id
     *
     * @param string $paymentId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentWithHttpInfo($paymentId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->getPaymentRequest($paymentId, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentAsync
     *
     * Retrieve a payment by id
     *
     * @param string $paymentId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsync($paymentId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentAsyncWithHttpInfo($paymentId, $withPluginInfo, $withAttempts, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAsyncWithHttpInfo
     *
     * Retrieve a payment by id
     *
     * @param string $paymentId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAsyncWithHttpInfo($paymentId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->getPaymentRequest($paymentId, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayment'
     *
     * @param string $paymentId (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentRequest($paymentId, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling getPayment'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if ($withAttempts !== null) {
            $queryParams['withAttempts'] = ObjectSerializer::toQueryValue($withAttempts);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentAttemptAuditLogsWithHistory
     *
     * Retrieve payment attempt audit logs with history by id
     *
     * @param string $paymentAttemptId paymentAttemptId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getPaymentAttemptAuditLogsWithHistory($paymentAttemptId)
    {
        list($response) = $this->getPaymentAttemptAuditLogsWithHistoryWithHttpInfo($paymentAttemptId);
        return $response;
    }

    /**
     * Operation getPaymentAttemptAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve payment attempt audit logs with history by id
     *
     * @param string $paymentAttemptId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentAttemptAuditLogsWithHistoryWithHttpInfo($paymentAttemptId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getPaymentAttemptAuditLogsWithHistoryRequest($paymentAttemptId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentAttemptAuditLogsWithHistoryAsync
     *
     * Retrieve payment attempt audit logs with history by id
     *
     * @param string $paymentAttemptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAttemptAuditLogsWithHistoryAsync($paymentAttemptId)
    {
        return $this->getPaymentAttemptAuditLogsWithHistoryAsyncWithHttpInfo($paymentAttemptId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAttemptAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve payment attempt audit logs with history by id
     *
     * @param string $paymentAttemptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAttemptAuditLogsWithHistoryAsyncWithHttpInfo($paymentAttemptId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getPaymentAttemptAuditLogsWithHistoryRequest($paymentAttemptId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentAttemptAuditLogsWithHistory'
     *
     * @param string $paymentAttemptId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentAttemptAuditLogsWithHistoryRequest($paymentAttemptId)
    {
        // verify the required parameter 'paymentAttemptId' is set
        if ($paymentAttemptId === null || (is_array($paymentAttemptId) && count($paymentAttemptId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentAttemptId when calling getPaymentAttemptAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/payments/attempts/{paymentAttemptId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($paymentAttemptId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentAttemptId' . '}',
                ObjectSerializer::toPathValue($paymentAttemptId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentAuditLogsWithHistory
     *
     * Retrieve payment audit logs with history by id
     *
     * @param string $paymentId paymentId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\AuditLog[]
     */
    public function getPaymentAuditLogsWithHistory($paymentId)
    {
        list($response) = $this->getPaymentAuditLogsWithHistoryWithHttpInfo($paymentId);
        return $response;
    }

    /**
     * Operation getPaymentAuditLogsWithHistoryWithHttpInfo
     *
     * Retrieve payment audit logs with history by id
     *
     * @param string $paymentId (required)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\AuditLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentAuditLogsWithHistoryWithHttpInfo($paymentId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getPaymentAuditLogsWithHistoryRequest($paymentId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\AuditLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentAuditLogsWithHistoryAsync
     *
     * Retrieve payment audit logs with history by id
     *
     * @param string $paymentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAuditLogsWithHistoryAsync($paymentId)
    {
        return $this->getPaymentAuditLogsWithHistoryAsyncWithHttpInfo($paymentId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentAuditLogsWithHistoryAsyncWithHttpInfo
     *
     * Retrieve payment audit logs with history by id
     *
     * @param string $paymentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentAuditLogsWithHistoryAsyncWithHttpInfo($paymentId)
    {
        $returnType = '\Killbill\Client\Swagger\Model\AuditLog[]';
        $request = $this->getPaymentAuditLogsWithHistoryRequest($paymentId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentAuditLogsWithHistory'
     *
     * @param string $paymentId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentAuditLogsWithHistoryRequest($paymentId)
    {
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling getPaymentAuditLogsWithHistory'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/auditLogsWithHistory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentByExternalKey
     *
     * Retrieve a payment by external key
     *
     * @param string $externalKey externalKey (required)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param bool|null $withAttempts withAttempts (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function getPaymentByExternalKey($externalKey, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentByExternalKeyWithHttpInfo($externalKey, $withPluginInfo, $withAttempts, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentByExternalKeyWithHttpInfo
     *
     * Retrieve a payment by external key
     *
     * @param string $externalKey (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentByExternalKeyWithHttpInfo($externalKey, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->getPaymentByExternalKeyRequest($externalKey, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentByExternalKeyAsync
     *
     * Retrieve a payment by external key
     *
     * @param string $externalKey (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentByExternalKeyAsync($externalKey, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentByExternalKeyAsyncWithHttpInfo($externalKey, $withPluginInfo, $withAttempts, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentByExternalKeyAsyncWithHttpInfo
     *
     * Retrieve a payment by external key
     *
     * @param string $externalKey (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentByExternalKeyAsyncWithHttpInfo($externalKey, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->getPaymentByExternalKeyRequest($externalKey, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentByExternalKey'
     *
     * @param string $externalKey (required)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentByExternalKeyRequest($externalKey, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'externalKey' is set
        if ($externalKey === null || (is_array($externalKey) && count($externalKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalKey when calling getPaymentByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if ($withAttempts !== null) {
            $queryParams['withAttempts'] = ObjectSerializer::toQueryValue($withAttempts);
        }
        // query params
        if ($externalKey !== null) {
            $queryParams['externalKey'] = ObjectSerializer::toQueryValue($externalKey);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentCustomFields
     *
     * Retrieve payment custom fields
     *
     * @param string $paymentId paymentId (required)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\CustomField[]
     */
    public function getPaymentCustomFields($paymentId, $audit = 'NONE')
    {
        list($response) = $this->getPaymentCustomFieldsWithHttpInfo($paymentId, $audit);
        return $response;
    }

    /**
     * Operation getPaymentCustomFieldsWithHttpInfo
     *
     * Retrieve payment custom fields
     *
     * @param string $paymentId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentCustomFieldsWithHttpInfo($paymentId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getPaymentCustomFieldsRequest($paymentId, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentCustomFieldsAsync
     *
     * Retrieve payment custom fields
     *
     * @param string $paymentId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentCustomFieldsAsync($paymentId, $audit = 'NONE')
    {
        return $this->getPaymentCustomFieldsAsyncWithHttpInfo($paymentId, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentCustomFieldsAsyncWithHttpInfo
     *
     * Retrieve payment custom fields
     *
     * @param string $paymentId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentCustomFieldsAsyncWithHttpInfo($paymentId, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\CustomField[]';
        $request = $this->getPaymentCustomFieldsRequest($paymentId, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentCustomFields'
     *
     * @param string $paymentId (required)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentCustomFieldsRequest($paymentId, $audit = 'NONE')
    {
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling getPaymentCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentTags
     *
     * Retrieve payment payment tags
     *
     * @param string $paymentId paymentId (required)
     * @param bool|null $includedDeleted includedDeleted (optional, default to false)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Tag[]
     */
    public function getPaymentTags($paymentId, $includedDeleted = 'false', $audit = 'NONE')
    {
        list($response) = $this->getPaymentTagsWithHttpInfo($paymentId, $includedDeleted, $audit);
        return $response;
    }

    /**
     * Operation getPaymentTagsWithHttpInfo
     *
     * Retrieve payment payment tags
     *
     * @param string $paymentId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentTagsWithHttpInfo($paymentId, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getPaymentTagsRequest($paymentId, $includedDeleted, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentTagsAsync
     *
     * Retrieve payment payment tags
     *
     * @param string $paymentId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentTagsAsync($paymentId, $includedDeleted = 'false', $audit = 'NONE')
    {
        return $this->getPaymentTagsAsyncWithHttpInfo($paymentId, $includedDeleted, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentTagsAsyncWithHttpInfo
     *
     * Retrieve payment payment tags
     *
     * @param string $paymentId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentTagsAsyncWithHttpInfo($paymentId, $includedDeleted = 'false', $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Tag[]';
        $request = $this->getPaymentTagsRequest($paymentId, $includedDeleted, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentTags'
     *
     * @param string $paymentId (required)
     * @param bool $includedDeleted (optional, default to false)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentTagsRequest($paymentId, $includedDeleted = 'false', $audit = 'NONE')
    {
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling getPaymentTags'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includedDeleted !== null) {
            $queryParams['includedDeleted'] = ObjectSerializer::toQueryValue($includedDeleted);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayments
     *
     * Get payments
     *
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param string|null $pluginName pluginName (optional)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param bool|null $withAttempts withAttempts (optional, default to false)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment[]
     */
    public function getPayments($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->getPaymentsWithHttpInfo($offset, $limit, $pluginName, $withPluginInfo, $withAttempts, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation getPaymentsWithHttpInfo
     *
     * Get payments
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentsWithHttpInfo($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment[]';
        $request = $this->getPaymentsRequest($offset, $limit, $pluginName, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentsAsync
     *
     * Get payments
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsync($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        return $this->getPaymentsAsyncWithHttpInfo($offset, $limit, $pluginName, $withPluginInfo, $withAttempts, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentsAsyncWithHttpInfo
     *
     * Get payments
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentsAsyncWithHttpInfo($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment[]';
        $request = $this->getPaymentsRequest($offset, $limit, $pluginName, $withPluginInfo, $withAttempts, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayments'
     *
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param string $pluginName (optional)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentsRequest($offset = '0', $limit = '100', $pluginName = null, $withPluginInfo = 'false', $withAttempts = 'false', $pluginProperty = null, $audit = 'NONE')
    {

        $resourcePath = '/1.0/kb/payments/pagination';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($pluginName !== null) {
            $queryParams['pluginName'] = ObjectSerializer::toQueryValue($pluginName);
        }
        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if ($withAttempts !== null) {
            $queryParams['withAttempts'] = ObjectSerializer::toQueryValue($withAttempts);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyPaymentCustomFields
     *
     * Modify custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function modifyPaymentCustomFields($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $this->modifyPaymentCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);
    }

    /**
     * Operation modifyPaymentCustomFieldsWithHttpInfo
     *
     * Modify custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyPaymentCustomFieldsWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifyPaymentCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation modifyPaymentCustomFieldsAsync
     *
     * Modify custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyPaymentCustomFieldsAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        return $this->modifyPaymentCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyPaymentCustomFieldsAsyncWithHttpInfo
     *
     * Modify custom fields to payment
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyPaymentCustomFieldsAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        $returnType = null;
        $request = $this->modifyPaymentCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyPaymentCustomFields'
     *
     * @param \Killbill\Client\Swagger\Model\CustomField[] $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyPaymentCustomFieldsRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyPaymentCustomFields'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling modifyPaymentCustomFields'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling modifyPaymentCustomFields'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundPayment
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function refundPayment($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->refundPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation refundPaymentWithHttpInfo
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->refundPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundPaymentAsync
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->refundPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundPaymentAsyncWithHttpInfo
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->refundPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundPayment'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling refundPayment'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling refundPayment'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling refundPayment'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundPaymentByExternalKey
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment
     */
    public function refundPaymentByExternalKey($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        list($response) = $this->refundPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
        return $response;
    }

    /**
     * Operation refundPaymentByExternalKeyWithHttpInfo
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->refundPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundPaymentByExternalKeyAsync
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentByExternalKeyAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->refundPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundPaymentByExternalKeyAsyncWithHttpInfo
     *
     * Refund an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment';
        $request = $this->refundPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundPaymentByExternalKey'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling refundPaymentByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling refundPaymentByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPayments
     *
     * Search payments
     *
     * @param string $searchKey searchKey (required)
     * @param int|null $offset offset (optional, default to 0)
     * @param int|null $limit limit (optional, default to 100)
     * @param bool|null $withPluginInfo withPluginInfo (optional, default to false)
     * @param bool|null $withAttempts withAttempts (optional, default to false)
     * @param string|null $pluginName pluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     * @param string|null $audit audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Killbill\Client\Swagger\Model\Payment[]
     */
    public function searchPayments($searchKey, $offset = '0', $limit = '100', $withPluginInfo = 'false', $withAttempts = 'false', $pluginName = null, $pluginProperty = null, $audit = 'NONE')
    {
        list($response) = $this->searchPaymentsWithHttpInfo($searchKey, $offset, $limit, $withPluginInfo, $withAttempts, $pluginName, $pluginProperty, $audit);
        return $response;
    }

    /**
     * Operation searchPaymentsWithHttpInfo
     *
     * Search payments
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Killbill\Client\Swagger\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPaymentsWithHttpInfo($searchKey, $offset = '0', $limit = '100', $withPluginInfo = 'false', $withAttempts = 'false', $pluginName = null, $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment[]';
        $request = $this->searchPaymentsRequest($searchKey, $offset, $limit, $withPluginInfo, $withAttempts, $pluginName, $pluginProperty, $audit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Killbill\Client\Swagger\Model\Payment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPaymentsAsync
     *
     * Search payments
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPaymentsAsync($searchKey, $offset = '0', $limit = '100', $withPluginInfo = 'false', $withAttempts = 'false', $pluginName = null, $pluginProperty = null, $audit = 'NONE')
    {
        return $this->searchPaymentsAsyncWithHttpInfo($searchKey, $offset, $limit, $withPluginInfo, $withAttempts, $pluginName, $pluginProperty, $audit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPaymentsAsyncWithHttpInfo
     *
     * Search payments
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPaymentsAsyncWithHttpInfo($searchKey, $offset = '0', $limit = '100', $withPluginInfo = 'false', $withAttempts = 'false', $pluginName = null, $pluginProperty = null, $audit = 'NONE')
    {
        $returnType = '\Killbill\Client\Swagger\Model\Payment[]';
        $request = $this->searchPaymentsRequest($searchKey, $offset, $limit, $withPluginInfo, $withAttempts, $pluginName, $pluginProperty, $audit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPayments'
     *
     * @param string $searchKey (required)
     * @param int $offset (optional, default to 0)
     * @param int $limit (optional, default to 100)
     * @param bool $withPluginInfo (optional, default to false)
     * @param bool $withAttempts (optional, default to false)
     * @param string $pluginName (optional)
     * @param string[] $pluginProperty (optional)
     * @param string $audit (optional, default to NONE)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPaymentsRequest($searchKey, $offset = '0', $limit = '100', $withPluginInfo = 'false', $withAttempts = 'false', $pluginName = null, $pluginProperty = null, $audit = 'NONE')
    {
        // verify the required parameter 'searchKey' is set
        if ($searchKey === null || (is_array($searchKey) && count($searchKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $searchKey when calling searchPayments'
            );
        }

        $resourcePath = '/1.0/kb/payments/search/{searchKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($withPluginInfo !== null) {
            $queryParams['withPluginInfo'] = ObjectSerializer::toQueryValue($withPluginInfo);
        }
        // query params
        if ($withAttempts !== null) {
            $queryParams['withAttempts'] = ObjectSerializer::toQueryValue($withAttempts);
        }
        // query params
        if ($pluginName !== null) {
            $queryParams['pluginName'] = ObjectSerializer::toQueryValue($pluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // query params
        if ($audit !== null) {
            $queryParams['audit'] = ObjectSerializer::toQueryValue($audit);
        }

        // path params
        if ($searchKey !== null) {
            $resourcePath = str_replace(
                '{' . 'searchKey' . '}',
                ObjectSerializer::toPathValue($searchKey),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidPayment
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string $paymentId paymentId (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function voidPayment($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $this->voidPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
    }

    /**
     * Operation voidPaymentWithHttpInfo
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidPaymentWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->voidPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation voidPaymentAsync
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidPaymentAsync($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->voidPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidPaymentAsyncWithHttpInfo
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidPaymentAsyncWithHttpInfo($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->voidPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidPayment'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $paymentId (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voidPaymentRequest($body, $xKillbillCreatedBy, $paymentId, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling voidPayment'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling voidPayment'
            );
        }
        // verify the required parameter 'paymentId' is set
        if ($paymentId === null || (is_array($paymentId) && count($paymentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paymentId when calling voidPayment'
            );
        }

        $resourcePath = '/1.0/kb/payments/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }

        // path params
        if ($paymentId !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($paymentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidPaymentByExternalKey
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body body (required)
     * @param string $xKillbillCreatedBy xKillbillCreatedBy (required)
     * @param string|null $xKillbillReason xKillbillReason (optional)
     * @param string|null $xKillbillComment xKillbillComment (optional)
     * @param string[]|null $controlPluginName controlPluginName (optional)
     * @param string[]|null $pluginProperty pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function voidPaymentByExternalKey($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $this->voidPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);
    }

    /**
     * Operation voidPaymentByExternalKeyWithHttpInfo
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidPaymentByExternalKeyWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->voidPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            return $this->handleResponse($request, $response, $returnType);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation voidPaymentByExternalKeyAsync
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidPaymentByExternalKeyAsync($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        return $this->voidPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidPaymentByExternalKeyAsyncWithHttpInfo
     *
     * Void an existing payment
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidPaymentByExternalKeyAsyncWithHttpInfo($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        $returnType = null;
        $request = $this->voidPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason, $xKillbillComment, $controlPluginName, $pluginProperty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    return $this->handleResponse($request, $response, $returnType);
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidPaymentByExternalKey'
     *
     * @param \Killbill\Client\Swagger\Model\PaymentTransaction $body (required)
     * @param string $xKillbillCreatedBy (required)
     * @param string $xKillbillReason (optional)
     * @param string $xKillbillComment (optional)
     * @param string[] $controlPluginName (optional)
     * @param string[] $pluginProperty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voidPaymentByExternalKeyRequest($body, $xKillbillCreatedBy, $xKillbillReason = null, $xKillbillComment = null, $controlPluginName = null, $pluginProperty = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling voidPaymentByExternalKey'
            );
        }
        // verify the required parameter 'xKillbillCreatedBy' is set
        if ($xKillbillCreatedBy === null || (is_array($xKillbillCreatedBy) && count($xKillbillCreatedBy) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xKillbillCreatedBy when calling voidPaymentByExternalKey'
            );
        }

        $resourcePath = '/1.0/kb/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($controlPluginName)) {
            $controlPluginName = ObjectSerializer::serializeCollection($controlPluginName, /*'multi'*/'csv', true);
        }
        if ($controlPluginName !== null) {
            $queryParams['controlPluginName'] = ObjectSerializer::toQueryValue($controlPluginName);
        }
        // query params
        if (is_array($pluginProperty)) {
            $pluginProperty = ObjectSerializer::serializeCollection($pluginProperty, /*'multi'*/'csv', true);
        }
        if ($pluginProperty !== null) {
            $queryParams['pluginProperty'] = ObjectSerializer::toQueryValue($pluginProperty);
        }
        // header params
        if ($xKillbillCreatedBy !== null) {
            $headerParams['X-Killbill-CreatedBy'] = ObjectSerializer::toHeaderValue($xKillbillCreatedBy);
        }
        // header params
        if ($xKillbillReason !== null) {
            $headerParams['X-Killbill-Reason'] = ObjectSerializer::toHeaderValue($xKillbillReason);
        }
        // header params
        if ($xKillbillComment !== null) {
            $headerParams['X-Killbill-Comment'] = ObjectSerializer::toHeaderValue($xKillbillComment);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            } elseif (is_array($httpBody) && $headers['Content-Type'] === 'application/json') {
                $httpBody = array_map(function($value) {
                    return ObjectSerializer::sanitizeForSerialization($value);
                }, $_tempBody);
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiKey');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiKey'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Killbill-ApiSecret');
        if ($apiKey !== null) {
            $headers['X-Killbill-ApiSecret'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }


    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
    
    /**
     * Response handler
     *
     * @param Request  $request    Request
     * @param Response $response   Response
     * @param string   $returnType Return type
     *
     * @throws \Killbill\Client\Swagger\ApiException on non-2xx response
     * @return array of returned object matching type, HTTP status code, HTTP response headers (array of strings)
     */
    protected function handleResponse($request, $response, $returnType)
    {
        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        }

        if ($statusCode === 201 && $response->hasHeader('Location')) {
            // This is a Created redirection, getting the object from the location target
            $location = $response->getHeader('Location')[0];

            if (strpos($location, $this->config->getHost()) !== 0) {
                throw new ApiException(
                    sprintf(
                        '[%d] Received a location header not matching the configured host (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $options = $this->createHttpClientOption();
            $locationRequest = new Request(
                'GET',
                $location,
                $request->getHeaders()
            );
            $locationResponse = $this->client->send($locationRequest, $options);

            $responseBody = $locationResponse->getBody();
        } else {
            $responseBody = $response->getBody();
        }

        if ($returnType === null || $returnType === '') {
            $returnedObject = null;
        } else {
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            $returnedObject = ObjectSerializer::deserialize($content, $returnType, []);
        }

        return [
            $returnedObject,
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }
}
