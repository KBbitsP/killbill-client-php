<?php
/**
 * PluginInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.22.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Model;

use \ArrayAccess;
use \Killbill\Client\Swagger\ObjectSerializer;

/**
 * PluginInfo Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PluginInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PluginInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bundleSymbolicName' => 'string',
'pluginKey' => 'string',
'pluginName' => 'string',
'version' => 'string',
'state' => 'string',
'isSelectedForStart' => 'bool',
'services' => '\Killbill\Client\Swagger\Model\PluginServiceInfo[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bundleSymbolicName' => null,
'pluginKey' => null,
'pluginName' => null,
'version' => null,
'state' => null,
'isSelectedForStart' => null,
'services' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bundleSymbolicName' => 'bundleSymbolicName',
'pluginKey' => 'pluginKey',
'pluginName' => 'pluginName',
'version' => 'version',
'state' => 'state',
'isSelectedForStart' => 'isSelectedForStart',
'services' => 'services'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bundleSymbolicName' => 'setBundleSymbolicName',
'pluginKey' => 'setPluginKey',
'pluginName' => 'setPluginName',
'version' => 'setVersion',
'state' => 'setState',
'isSelectedForStart' => 'setIsSelectedForStart',
'services' => 'setServices'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bundleSymbolicName' => 'getBundleSymbolicName',
'pluginKey' => 'getPluginKey',
'pluginName' => 'getPluginName',
'version' => 'getVersion',
'state' => 'getState',
'isSelectedForStart' => 'getIsSelectedForStart',
'services' => 'getServices'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bundleSymbolicName'] = isset($data['bundleSymbolicName']) ? $data['bundleSymbolicName'] : null;
        $this->container['pluginKey'] = isset($data['pluginKey']) ? $data['pluginKey'] : null;
        $this->container['pluginName'] = isset($data['pluginName']) ? $data['pluginName'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['isSelectedForStart'] = isset($data['isSelectedForStart']) ? $data['isSelectedForStart'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bundleSymbolicName
     *
     * @return string
     */
    public function getBundleSymbolicName()
    {
        return $this->container['bundleSymbolicName'];
    }

    /**
     * Sets bundleSymbolicName
     *
     * @param string $bundleSymbolicName bundleSymbolicName
     *
     * @return $this
     */
    public function setBundleSymbolicName($bundleSymbolicName)
    {
        $this->container['bundleSymbolicName'] = $bundleSymbolicName;

        return $this;
    }

    /**
     * Gets pluginKey
     *
     * @return string
     */
    public function getPluginKey()
    {
        return $this->container['pluginKey'];
    }

    /**
     * Sets pluginKey
     *
     * @param string $pluginKey pluginKey
     *
     * @return $this
     */
    public function setPluginKey($pluginKey)
    {
        $this->container['pluginKey'] = $pluginKey;

        return $this;
    }

    /**
     * Gets pluginName
     *
     * @return string
     */
    public function getPluginName()
    {
        return $this->container['pluginName'];
    }

    /**
     * Sets pluginName
     *
     * @param string $pluginName pluginName
     *
     * @return $this
     */
    public function setPluginName($pluginName)
    {
        $this->container['pluginName'] = $pluginName;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets isSelectedForStart
     *
     * @return bool
     */
    public function getIsSelectedForStart()
    {
        return $this->container['isSelectedForStart'];
    }

    /**
     * Sets isSelectedForStart
     *
     * @param bool $isSelectedForStart isSelectedForStart
     *
     * @return $this
     */
    public function setIsSelectedForStart($isSelectedForStart)
    {
        $this->container['isSelectedForStart'] = $isSelectedForStart;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Killbill\Client\Swagger\Model\PluginServiceInfo[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Killbill\Client\Swagger\Model\PluginServiceInfo[] $services services
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
