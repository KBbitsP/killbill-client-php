<?php
/**
 * NodeInfo
 *
 * PHP version 7.1+
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Kill Bill
 *
 * Kill Bill is an open-source billing and payments platform
 *
 * OpenAPI spec version: 0.24.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Killbill\Client\Swagger\Model;

use \ArrayAccess;
use \Killbill\Client\Swagger\ObjectSerializer;

/**
 * NodeInfo Class Doc Comment
 *
 * @category Class
 * @package  Killbill\Client\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NodeInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodeInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nodeName' => 'string',
'bootTime' => '\DateTime',
'lastUpdatedDate' => '\DateTime',
'kbVersion' => 'string',
'apiVersion' => 'string',
'pluginApiVersion' => 'string',
'commonVersion' => 'string',
'platformVersion' => 'string',
'pluginsInfo' => '\Killbill\Client\Swagger\Model\PluginInfo[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nodeName' => null,
'bootTime' => 'date-time',
'lastUpdatedDate' => 'date-time',
'kbVersion' => null,
'apiVersion' => null,
'pluginApiVersion' => null,
'commonVersion' => null,
'platformVersion' => null,
'pluginsInfo' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nodeName' => 'nodeName',
'bootTime' => 'bootTime',
'lastUpdatedDate' => 'lastUpdatedDate',
'kbVersion' => 'kbVersion',
'apiVersion' => 'apiVersion',
'pluginApiVersion' => 'pluginApiVersion',
'commonVersion' => 'commonVersion',
'platformVersion' => 'platformVersion',
'pluginsInfo' => 'pluginsInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nodeName' => 'setNodeName',
'bootTime' => 'setBootTime',
'lastUpdatedDate' => 'setLastUpdatedDate',
'kbVersion' => 'setKbVersion',
'apiVersion' => 'setApiVersion',
'pluginApiVersion' => 'setPluginApiVersion',
'commonVersion' => 'setCommonVersion',
'platformVersion' => 'setPlatformVersion',
'pluginsInfo' => 'setPluginsInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nodeName' => 'getNodeName',
'bootTime' => 'getBootTime',
'lastUpdatedDate' => 'getLastUpdatedDate',
'kbVersion' => 'getKbVersion',
'apiVersion' => 'getApiVersion',
'pluginApiVersion' => 'getPluginApiVersion',
'commonVersion' => 'getCommonVersion',
'platformVersion' => 'getPlatformVersion',
'pluginsInfo' => 'getPluginsInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nodeName'] = isset($data['nodeName']) ? $data['nodeName'] : null;
        $this->container['bootTime'] = isset($data['bootTime']) ? $data['bootTime'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['kbVersion'] = isset($data['kbVersion']) ? $data['kbVersion'] : null;
        $this->container['apiVersion'] = isset($data['apiVersion']) ? $data['apiVersion'] : null;
        $this->container['pluginApiVersion'] = isset($data['pluginApiVersion']) ? $data['pluginApiVersion'] : null;
        $this->container['commonVersion'] = isset($data['commonVersion']) ? $data['commonVersion'] : null;
        $this->container['platformVersion'] = isset($data['platformVersion']) ? $data['platformVersion'] : null;
        $this->container['pluginsInfo'] = isset($data['pluginsInfo']) ? $data['pluginsInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nodeName
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['nodeName'];
    }

    /**
     * Sets nodeName
     *
     * @param string $nodeName nodeName
     *
     * @return $this
     */
    public function setNodeName($nodeName): NodeInfo
    {
        $this->container['nodeName'] = $nodeName;

        return $this;
    }

    /**
     * Gets bootTime
     *
     * @return \DateTime
     */
    public function getBootTime()
    {
        return $this->container['bootTime'];
    }

    /**
     * Sets bootTime
     *
     * @param \DateTime $bootTime bootTime
     *
     * @return $this
     */
    public function setBootTime($bootTime): NodeInfo
    {
        $this->container['bootTime'] = $bootTime;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate lastUpdatedDate
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate): NodeInfo
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets kbVersion
     *
     * @return string
     */
    public function getKbVersion()
    {
        return $this->container['kbVersion'];
    }

    /**
     * Sets kbVersion
     *
     * @param string $kbVersion kbVersion
     *
     * @return $this
     */
    public function setKbVersion($kbVersion): NodeInfo
    {
        $this->container['kbVersion'] = $kbVersion;

        return $this;
    }

    /**
     * Gets apiVersion
     *
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['apiVersion'];
    }

    /**
     * Sets apiVersion
     *
     * @param string $apiVersion apiVersion
     *
     * @return $this
     */
    public function setApiVersion($apiVersion): NodeInfo
    {
        $this->container['apiVersion'] = $apiVersion;

        return $this;
    }

    /**
     * Gets pluginApiVersion
     *
     * @return string
     */
    public function getPluginApiVersion()
    {
        return $this->container['pluginApiVersion'];
    }

    /**
     * Sets pluginApiVersion
     *
     * @param string $pluginApiVersion pluginApiVersion
     *
     * @return $this
     */
    public function setPluginApiVersion($pluginApiVersion): NodeInfo
    {
        $this->container['pluginApiVersion'] = $pluginApiVersion;

        return $this;
    }

    /**
     * Gets commonVersion
     *
     * @return string
     */
    public function getCommonVersion()
    {
        return $this->container['commonVersion'];
    }

    /**
     * Sets commonVersion
     *
     * @param string $commonVersion commonVersion
     *
     * @return $this
     */
    public function setCommonVersion($commonVersion): NodeInfo
    {
        $this->container['commonVersion'] = $commonVersion;

        return $this;
    }

    /**
     * Gets platformVersion
     *
     * @return string
     */
    public function getPlatformVersion()
    {
        return $this->container['platformVersion'];
    }

    /**
     * Sets platformVersion
     *
     * @param string $platformVersion platformVersion
     *
     * @return $this
     */
    public function setPlatformVersion($platformVersion): NodeInfo
    {
        $this->container['platformVersion'] = $platformVersion;

        return $this;
    }

    /**
     * Gets pluginsInfo
     *
     * @return \Killbill\Client\Swagger\Model\PluginInfo[]
     */
    public function getPluginsInfo()
    {
        return $this->container['pluginsInfo'];
    }

    /**
     * Sets pluginsInfo
     *
     * @param \Killbill\Client\Swagger\Model\PluginInfo[] $pluginsInfo pluginsInfo
     *
     * @return $this
     */
    public function setPluginsInfo($pluginsInfo): NodeInfo
    {
        $this->container['pluginsInfo'] = $pluginsInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
